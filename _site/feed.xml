<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-07-12T19:57:41-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Quellus</title><subtitle>Learning Godot and teaching as I do</subtitle><author><name>Quellus</name><email>quellus7@gmail.com</email></author><entry><title type="html">Everything you need to know to get started with GitHub and Godot</title><link href="http://localhost:4000/2024-07-12/git-basics" rel="alternate" type="text/html" title="Everything you need to know to get started with GitHub and Godot" /><published>2024-07-12T00:00:00-06:00</published><updated>2024-07-12T00:00:00-06:00</updated><id>http://localhost:4000/2024-07-12/git-basics</id><content type="html" xml:base="http://localhost:4000/2024-07-12/git-basics"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>This post assumes you’re already somewhat comfortable with the command line. Git itself is pretty complicated. My aim is only to teach you the commands you need to know to backup your game to GitHub and track your changes. If you’re not comfortable with the command line, I strongly recommend using the GitHub Desktop app instead. I made a <a href="https://www.youtube.com/watch?v=8UrZGJQq5cE&amp;t=2s">video tutorial here</a> covering how to use GitHub desktop without touching the command line.</p>

<h3 id="why-use-git">Why use git?</h3>
<p>Git is an incredibly powerful tool. I use git for just about every coding project even when I’m working alone.</p>

<p>Here are the reasons to use Git:</p>
<ol>
  <li>With GitHub, your code is stored in the cloud keeping a backup of your work and making it easy to move your progress between computers or people.</li>
  <li>Git keeps a history of every change you make allowing you to easily rollback if you change your mind or look back at old ways you solved a problem.</li>
  <li>Branching (not covered in this post) allows you to work on multiple separate things at the same time and track your progress along the way.</li>
  <li>Git’s biggest strength is collaboration. It allows you to easily share your progress with eachother, and merge your changes together if you both made changes to the same files.</li>
</ol>

<h2 id="table-of-contents">Table of contents:</h2>
<ul>
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#setup">Setup</a>
    <ul>
      <li><a href="#gitignore-file">gitignore File</a></li>
      <li><a href="#setup-ssh">setup SSH</a></li>
      <li><a href="#clone-the-repo">Clone the Repo</a></li>
    </ul>
  </li>
  <li><a href="#common-workflow">Common Workflow</a></li>
  <li><a href="#the-important-commands">The Important Commands</a></li>
  <li><a href="#what-to-do-if-something-goes-wrong">What to do if something goes wrong</a></li>
</ul>

<h2 id="setup">Setup</h2>
<p>These instructions were designed with GitHub in mind, but will still be useful for git hosts such as BitBucket, or Gitlab.</p>
<ol>
  <li>If you haven’t already, make a GitHub account</li>
  <li>Log in to your account in the browser</li>
  <li>Create an empty repository</li>
  <li>Be sure to add the Godot “.gitignore” template when you’re making the reposity</li>
</ol>

<h3 id="gitignore-file">gitignore File</h3>
<p>Every time you run your game, Godot will create temporary files you don’t need to publish to the repository. The .gitignore lists all of those generated files and directories. As a result, git will completely ignore them.</p>

<p>While you’re creating your repository, you should see a dropdown menu to “Add .gitgnore” (see photo below). GitHub has a built in template for the Godot and I suggest starting with it.</p>

<p><img src="/_images/GitHub-.gitignore-Template.png" alt=".gitignore Template" /></p>

<p>If you weren’t able to start with a template, make a <code class="language-plaintext highlighter-rouge">.gitignore</code> file in the root of your repository. Here are the contents:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Godot 4+ specific ignores
.godot/

# Godot-specific ignores
.import/
export.cfg
export_presets.cfg

# Imported translations (automatically generated from CSV files)
*.translation

# Mono-specific ignores
.mono/
data_*/
mono_crash.*.json

</code></pre></div></div>

<h3 id="setup-ssh">Setup SSH</h3>
<p>Dealing with GitHub is much easier if you setup an SSH key first. It’s not required, but if you don’t, you will have to authenticate every time you upload or download changes from GitHub.</p>

<p><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">Here’s how to generate your key</a> and <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">how to add it to GitHub</a>.</p>

<p><strong>Warning!</strong> when uploading your key to GitHub, make sure you use the .pub file! The other file is your private key and you definitely don’t want that being shared!</p>

<h3 id="clone-the-repo">Clone The Repo</h3>
<ol>
  <li>
    <p>If you setup an SSH key, use the SSH URL you will find here
<img src="/_images/GitHubCloneURL.png" alt="GitHub Clone URL" />
 If you did not setup an SSH key, use HTTPS.</p>
  </li>
  <li>Clone the repo by entering the following command with the URL <code class="language-plaintext highlighter-rouge">git clone &lt;URL&gt;</code></li>
  <li>Create or copy a Godot project
    <ul>
      <li>If you already have a Godot project, cp the contents of the project into the directory created as a result of the clone command.</li>
      <li>If this is a new project, open Godot and create a new project in the new directory.</li>
    </ul>
  </li>
</ol>

<h2 id="common-workflow">Common Workflow</h2>
<p>Here’s the specific order I usually enter commands when working on a project.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git pull <span class="c"># Downloads the most recent changes from GitHub. I run this every time I start working just in case I forgot I pushed from a different computer or one of my teammates pushed changes</span>

<span class="c"># Open Godot and work on your game. When you get to a stopping point, continue to the next command.</span>

git status <span class="c"># Verify what files you changed</span>

git diff <span class="c"># This will open a text editor showing every line you've changed. I take this time to look for comments or print statements I meant to delete later.</span>

git add <span class="nb">.</span> <span class="c"># Stages all changed files in the current directory to be commited</span>
git commit <span class="nt">-m</span> <span class="s2">"Describe what you changed in this commit"</span> <span class="c"># Creates a commit. Your commit history is essentially a changelog of every change you've made. Best practice is to write a clear, but short description of what you changed.</span>

git push origin HEAD <span class="c"># Pushes the commit. Commits are saved locally, and will not be uploaded to GitHub until you push them</span>
</code></pre></div></div>

<h2 id="the-important-commands">The Important Commands</h2>
<p>These are the only commands you really need to get started. If you open the manpage for git, you’ll quickly discover that there’s an overwhelming amount. Stick to these for now and you should be okay.</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Explanation</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git clone &lt;repo url&gt;</code></td>
      <td>Download a repository for GitHub</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git status</code></td>
      <td>See which files have been changed</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git diff</code></td>
      <td>See which lines changed in each file</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git add &lt;filename&gt;</code></td>
      <td>Mark file(s) to be committed</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git commit -m "&lt;description&gt;"</code></td>
      <td>Commit changes <strong>locally</strong></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git push</code></td>
      <td>Push committed changes to GitHub</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">git pull</code></td>
      <td>Get the most recent changes from GitHub</td>
    </tr>
  </tbody>
</table>

<h2 id="what-to-do-if-something-goes-wrong">What to do if something goes wrong</h2>
<p><a href="https://dangitgit.com/">dangitgit.com</a> is one of the most useful websites I’ve found. I strongly recommend bookmarking it.</p>

<p>Here you will find some common issues and mistakes, and how to fix them.</p>

<p>Also feel free to join my livestreams <a href="https://twitch.tv/quellusdev">twitch.tv/quellusdev</a> we will happily do the best we can to help you live!</p>]]></content><author><name>Quellus</name><email>quellus7@gmail.com</email></author><category term="Godot," /><category term="Godot4," /><category term="Git," /><category term="GitHub," /><category term="Tutorial" /><summary type="html"><![CDATA[Introduction This post assumes you’re already somewhat comfortable with the command line. Git itself is pretty complicated. My aim is only to teach you the commands you need to know to backup your game to GitHub and track your changes. If you’re not comfortable with the command line, I strongly recommend using the GitHub Desktop app instead. I made a video tutorial here covering how to use GitHub desktop without touching the command line.]]></summary></entry><entry><title type="html">Ballistic arc when you have a set start and end point in Godot</title><link href="http://localhost:4000/2024-06-30/godot-ballistics" rel="alternate" type="text/html" title="Ballistic arc when you have a set start and end point in Godot" /><published>2024-06-30T00:00:00-06:00</published><updated>2024-06-30T00:00:00-06:00</updated><id>http://localhost:4000/2024-06-30/godot-ballistics</id><content type="html" xml:base="http://localhost:4000/2024-06-30/godot-ballistics"><![CDATA[<p>I added a new tower to my Godot tower defense game recently. Instead of firing bullets or lasers like my other towers, it launches missiles. These missiles required a creative solution because they have a ballistic arc and a set start and end point.</p>

<h2 id="what-didnt-work">What didn’t work</h2>

<h3 id="physics">Physics</h3>

<p>My first step when I was implementing this tower was to Google. Most results I’ve found suggest leaving it up to the physics engine. Make the bullet a rigid body, then give it gravity and an initial velocity. The physics engine will generate simulate a ballistic arc for you.</p>

<p>This doesn’t work because we have a set start and end point. With the physics approach, the end point of the arc is unpredictable. I could try adjusting the gravity and velocity to get it pretty close to the right end point, but it would be messy.</p>

<h3 id="bezier-interpolation">Bezier interpolation</h3>

<p>THe next idea I had, which I actually implemented, was using Vector3’s <a href="https://docs.godotengine.org/en/stable/classes/class_vector3.html#class-vector3-method-bezier-interpolate"><code class="language-plaintext highlighter-rouge">bezier_interpolate</code></a> function. In short, it generates a bezier curve from the points you supply it, you increment a time variable, and the function returns the position on the curve at that point in time. A bezier curves works with 4 points. P1 and P2 below denote the start and end of the curve. C1 and C2 are control points dictating the amount curvature.</p>

<p><img src="/_images/BezierCurve.png" alt="Bezier Curve" /></p>

<p>The reason this approach doesn’t work for me is that the speed of the missile isn’t constant. A longer curve results in a very fast moving missile, and the a shorter curve results in a very slow moving missile. I tried adjusting the passage of time based on the distance of the curve, but it was kind of messy and very imperfect.</p>

<p>Here’s a snippet of code that may help if you decide to try this approach for yourself.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var time_left_ratio = (time_left / total_time)
var p1 = start_pos
p1.y += peak_height
var p2 = target_pos
p2.y += peak_height
var next_position = start_pos.bezier_interpolate(p1, p2, target_pos, 1 - time_left_ratio)
look_at(next_position + Vector3(0.001, 0, 0), Vector3.UP)
position = next_position
</code></pre></div></div>

<h2 id="what-did-work">What did work</h2>

<p>My <strong>hopefully</strong> final attempt involved <a href="https://docs.godotengine.org/en/stable/classes/class_path3d.html">Path3D</a>. Everytime the the missile launcher wants to launch a missile, it first generates a Path3D, then spawns the missile as a <a href="https://docs.godotengine.org/en/stable/classes/class_pathfollow3d.html">PathFollow3D</a> to follow the path. I imagine it’s not very efficient to be spawning and deleting nodes so often, but it’s the best solution I’ve found so far.</p>

<p>Here’s how it works:</p>

<p>Path3D works on the same principle as the previous explanation. It’s a bezier curve, but instead of 4 points, it’s generated from 2. The first control point is passed in as the “out” variable of the first point, and the second control point the “in” variable of the second point.</p>

<p>This method also comes with the benefit that the pathfollower automatically rotates itself. I had to rotate the missile manually in the previous solution.</p>]]></content><author><name>Quellus</name><email>quellus7@gmail.com</email></author><category term="Godot," /><category term="Godot4," /><category term="Ballistics" /><summary type="html"><![CDATA[I added a new tower to my Godot tower defense game recently. Instead of firing bullets or lasers like my other towers, it launches missiles. These missiles required a creative solution because they have a ballistic arc and a set start and end point.]]></summary></entry></feed>